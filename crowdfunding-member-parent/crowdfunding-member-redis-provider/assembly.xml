<assembly>
    <!--<id>release</id>--><!--名字  会附加在版本后面-->
    <formats>
        <format>tar.gz</format><!--打包格式-->
    </formats>
    <!--如果为false，不会额外产生根目录，否则，在tar.gz包中会产生以pom.xml中artifactId和version命名的根目录-->
    <includeBaseDirectory>true</includeBaseDirectory>
    <!--是对依赖包的设置-->
    <dependencySets>
        <!-- 打包第三方依赖 -->
        <dependencySet>
            <!--定义了是否解压依赖包，如果为true，会解压出依赖包中的class文件，反之，则不进行解压-->
            <unpack>false</unpack>
            <!--限定了对哪些依赖包进行操作；（依赖包scope的值是在pom.xml中定义的）-->
            <scope>runtime</scope>
            <!-- 依赖包在tar.gz包中相对于根目录的路径-->
            <outputDirectory>lib</outputDirectory>
            <!--依赖包中是否包含当前工程-->
            <useProjectArtifact>true</useProjectArtifact>
        </dependencySet>
    </dependencySets>
    <!--指定哪些文件包含在打出的tar.gz包中-->
    <fileSets>
        <!-- 把项目的配置文件，打包进去resources目录 -->
        <fileSet>
            <directory>src/main/resources/</directory>
            <outputDirectory>resources</outputDirectory>
            <includes>
                <include>*.yml</include>
            </includes>
        </fileSet>
        <!-- 把项目的脚本文件目录（bin/）中的启动脚本文件，打包进去 -->
        <fileSet>
            <directory>bin</directory>
            <outputDirectory></outputDirectory>
            <includes>
                <include>*.sh</include>
            </includes>
            <lineEnding>unix</lineEnding>
            <fileMode>0755</fileMode>
        </fileSet>
        <!-- 把项目自己编译出来的jar文件，打包进去 -->
        <fileSet>
            <directory>${project.build.directory}</directory>
            <outputDirectory></outputDirectory>
            <includes>
                <include>*.jar</include>
            </includes>
        </fileSet>
    </fileSets>
</assembly>